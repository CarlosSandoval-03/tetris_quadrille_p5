class Quadrille{static version="0.5.0";static AND(quadrille1,quadrille2,row=0,col=0){return this.OP(quadrille1,quadrille2,(q1,q2)=>{if(q1&&q2)return q1},row,col)}static OR(quadrille1,quadrille2,row=0,col=0){return this.OP(quadrille1,quadrille2,(q1,q2)=>q1||(q2||void 0),row,col)}static XOR(quadrille1,quadrille2,row=0,col=0){return this.OP(quadrille1,quadrille2,(q1,q2)=>q1&&!q2?q1:!q1&&q2?q2:void 0,row,col)}static DIFF(quadrille1,quadrille2,row=0,col=0){return this.OP(quadrille1,quadrille2,(q1,q2)=>{if(q1&&!q2)return q1},row,col)}static NEG(quadrille,pattern){let result=new Quadrille(quadrille.width,quadrille.height);for(let i=0;i<quadrille.height;i++)for(let j=0;j<quadrille.width;j++)quadrille._memory2D[i][j]||(result._memory2D[i][j]=pattern);return result}static OP(quadrille1,quadrille2,operator,row=0,col=0){let quadrille=new Quadrille(col<0?Math.max(quadrille2.width,quadrille1.width-col):Math.max(quadrille1.width,quadrille2.width+col),row<0?Math.max(quadrille2.height,quadrille1.height-row):Math.max(quadrille1.height,quadrille2.height+row));for(let i=0;i<quadrille._memory2D.length;i++)for(let j=0;j<quadrille._memory2D[i].length;j++){let result=operator(quadrille1.read(row<0?i+row:i,col<0?j+col:j),quadrille2.read(row>0?i-row:i,col>0?j-col:j));result&&(quadrille._memory2D[i][j]=result)}return quadrille}constructor(){if(1===arguments.length&&Array.isArray(arguments[0])){let memory2D=arguments[0].map(array=>array.slice()),width;for(const entry of memory2D){if(!Array.isArray(entry))throw"Not2DArray in createQuadrille";width?width<entry.length&&(width=entry.length):width=entry.length}for(let i=0;i<memory2D.length;i++)memory2D[i]=this._format(memory2D[i],width);this._memory2D=memory2D}else if(2===arguments.length&&"number"==typeof arguments[0]&&Array.isArray(arguments[1])){let width=arguments[0],height=Math.ceil(arguments[1].length/width);this._memory2D=new Array(height);for(let i=0;i<height;i++){let start=width*i,end=start+width;this._memory2D[i]=this._format(arguments[1].slice(start,end),width)}}else{if(2!==arguments.length||"number"!=typeof arguments[0]||"number"!=typeof arguments[1])return 2===arguments.length&&"number"==typeof arguments[0]&&"number"!=typeof arguments[1]?(this._memory2D=Array(Math.round(arguments[0]*arguments[1].height/arguments[1].width)).fill().map(()=>Array(arguments[0]).fill(0)),void this.from(arguments[1])):3===arguments.length&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]?(this._memory2D=Array(Math.ceil(arguments[1].toString(2).length/arguments[0])).fill().map(()=>Array(arguments[0]).fill(0)),void this.from(arguments[1],arguments[2])):4===arguments.length&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]&&"number"==typeof arguments[2]?(this._memory2D=Array(arguments[1]).fill().map(()=>Array(arguments[0]).fill(0)),void this.rand(arguments[2],arguments[3])):void 0;this._memory2D=Array(arguments[1]).fill().map(()=>Array(arguments[0]).fill(0))}}_format(memory1D,size){for(let i=0;i<memory1D.length;i++)"number"==typeof memory1D[i]||"string"==typeof memory1D[i]||Array.isArray(memory1D[i])||memory1D[i]instanceof p5.Color||memory1D[i]instanceof p5.Image||(memory1D[i]=0);return memory1D.length<size?memory1D.concat(new Array(size-memory1D.length).fill(0)):memory1D}from(){if(1===arguments.length&&arguments[0]instanceof p5.Image){let image=arguments[0];image.loadPixels();let r=Array(this.height).fill().map(()=>Array(this.width).fill(0)),g=Array(this.height).fill().map(()=>Array(this.width).fill(0)),b=Array(this.height).fill().map(()=>Array(this.width).fill(0)),a=Array(this.height).fill().map(()=>Array(this.width).fill(0)),t=Array(this.height).fill().map(()=>Array(this.width).fill(0));for(let i=0;i<image.pixels.length/4;i++){let _=this._fromIndex(i,image.width),_i=Math.floor(_.row*this.height/image.height),_j=Math.floor(_.col*this.width/image.width);r[_i][_j]+=image.pixels[4*i],g[_i][_j]+=image.pixels[4*i+1],b[_i][_j]+=image.pixels[4*i+2],a[_i][_j]+=image.pixels[4*i+3],t[_i][_j]+=1}image.updatePixels();for(let i=0;i<this.height;i++)for(let j=0;j<this.width;j++)this._memory2D[i][j]=[r[i][j]/t[i][j],g[i][j]/t[i][j],b[i][j]/t[i][j],a[i][j]/t[i][j]]}if(2===arguments.length&&"number"==typeof arguments[0]){let length=this.width*this.height,bitboard=Math.abs(Math.round(arguments[0]));if(bitboard.toString(2).length>length)throw new Error("Value is to high to fill quadrille");for(let i=0;i<=length-1;i++)bitboard&1<<length-1-i&&(this._memory2D[this._fromIndex(i).row][this._fromIndex(i).col]=arguments[1])}}_fromIndex(index,width=this.width){return{row:index/width|0,col:index%width}}_toIndex(row,col,width=this.width){return row*width+col}toInt(){let result=0;for(let i=0;i<this.height;i++)for(let j=0;j<this.width;j++)this._memory2D[i][j]&&(result+=Math.pow(2,this.width*(this.height-i)-(j+1)));return result}toArray(){let memory2D=this.clone()._memory2D,result=new Array;for(let i=0;i<memory2D.length;i++)result=result.concat(memory2D[i]);return result}toMatrix(){return this.clone()._memory2D}get width(){return this._memory2D[0].length}get height(){return this._memory2D.length}get size(){return this.width*this.height}get order(){let result=0;for(let i=0;i<this.height;i++)for(let j=0;j<this.width;j++)this._memory2D[i][j]&&result++;return result}magnitude(row){let result=0;for(let j=0;j<this.width;j++)this._memory2D[row][j]&&result++;return result}replace(pattern1,pattern2){for(let i=0;i<this.height;i++)for(let j=0;j<this.width;j++)this._memory2D[i][j]===pattern1&&(this._memory2D[i][j]=pattern2)}fill(){if(1===arguments.length)for(let i=0;i<this.height;i++)for(let j=0;j<this.width;j++)this._memory2D[i][j]&&(this._memory2D[i][j]=arguments[0]);2===arguments.length&&"number"==typeof arguments[0]&&arguments[0]>=0&&arguments[0]<this.height&&this._memory2D[arguments[0]].fill(arguments[1]),3===arguments.length&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]&&arguments[0]>=0&&arguments[0]<this.height&&arguments[1]>=0&&arguments[1]<this.width&&(this._memory2D[arguments[0]][arguments[1]]=arguments[2])}read(row,col){if(row>=0&&row<this.height&&col>=0&&col<this.width)return this._memory2D[row][col]}filter(mask,row=0,col=0){if(mask.size%2==1&&mask.width===mask.height&&this.size>=mask.size){let half_size=(mask.width-1)/2;if(0==row||0==col)for(let i=half_size;i<this.height-half_size;i++)for(let j=half_size;j<this.width-half_size;j++)this._conv(mask,i,j,half_size);else this._conv(mask,row,col,half_size)}}_conv(mask,row,col,cache_half_size=(mask.width-1)/2){if(row>=cache_half_size&&col>=cache_half_size&&row<this.height-cache_half_size&&col<this.width-cache_half_size){let r=0,g=0,b=0;for(let imask=0;imask<mask.height;imask++)for(let jmask=0;jmask<mask.width;jmask++){let i=row+imask-cache_half_size,j=col+jmask-cache_half_size,neighbour=this._memory2D[i][j],mask_value=mask._memory2D[imask][jmask];if((neighbour instanceof p5.Color||Array.isArray(neighbour))&&"string"!=typeof mask_value&&!(mask_value instanceof p5.Image)){let weight="number"==typeof mask_value?mask_value:.299*red(mask_value)+.587*green(mask_value)+.114*blue(mask_value);r+=red(neighbour)*weight,g+=green(neighbour)*weight,b+=blue(neighbour)*weight}}r=constrain(r,0,255),g=constrain(g,0,255),b=constrain(b,0,255),this._memory2D[row][col]=color(r,g,b)}}rasterize(row0,col0,row1,col1,row2,col2,pattern0,pattern1=pattern0,pattern2=pattern0){if((pattern0 instanceof p5.Color||Array.isArray(pattern0))&&(pattern1 instanceof p5.Color||Array.isArray(pattern1))&&(pattern2 instanceof p5.Color||Array.isArray(pattern2)))for(let i=0;i<this.height;i++)for(let j=0;j<this.width;j++){let coords=this._barycentric_coords(j,i,row0,col0,row1,col1,row2,col2);if(coords.w0>=0&&coords.w1>=0&&coords.w2>=0){let r=red(pattern0)*coords.w0+red(pattern1)*coords.w1+red(pattern2)*coords.w2,g=green(pattern0)*coords.w0+green(pattern1)*coords.w1+green(pattern2)*coords.w2,b=blue(pattern0)*coords.w0+blue(pattern1)*coords.w1+blue(pattern2)*coords.w2,a=alpha(pattern0)*coords.w0+alpha(pattern1)*coords.w1+alpha(pattern2)*coords.w2;this._memory2D[i][j]=color(r,g,b,a)}}}_barycentric_coords(row,col,row0,col0,row1,col1,row2,col2){let edges=this._edge_functions(row,col,row0,col0,row1,col1,row2,col2),area=this._parallelogram_area(row0,col0,row1,col1,row2,col2);return{w0:edges.e12/area,w1:edges.e20/area,w2:edges.e01/area}}_parallelogram_area(row0,col0,row1,col1,row2,col2){return(col1-col0)*(row2-row0)-(col2-col0)*(row1-row0)}_edge_functions(row,col,row0,col0,row1,col1,row2,col2){let e01,e12,e20;return{e01:(row0-row1)*col+(col1-col0)*row+(col0*row1-row0*col1),e12:(row1-row2)*col+(col2-col1)*row+(col1*row2-row1*col2),e20:(row2-row0)*col+(col0-col2)*row+(col2*row0-row2*col0)}}rand(order,pattern){(order=Math.abs(order))>this.size&&(order=this.size);let disorder=this.order,counter=0;for(;counter<Math.abs(order-disorder);){let _=this._fromIndex(Math.floor(Math.random()*this.size));(order>disorder?!this._memory2D[_.row][_.col]:this._memory2D[_.row][_.col])&&(this._memory2D[_.row][_.col]=order>disorder?pattern:0,counter++)}}randomize(){let clone=this.clone();this.clear();for(let i=0;i<clone.height;i++)for(let j=0;j<clone.width;j++)if(clone._memory2D[i][j]){let _i,_j;do{_i=int(random(this.height)),_j=int(random(this.width))}while(this._memory2D[_i][_j]);this._memory2D[_i][_j]=clone._memory2D[i][j]}}insert(row){this._memory2D.splice(row,0,Array(this.width).fill(0))}delete(row){this.height>1&&row>=0&&row<this.height&&this._memory2D.splice(row,1)}clear(){0===arguments.length&&(this._memory2D=this._memory2D.map(x=>x.map(y=>0))),1===arguments.length&&"number"==typeof arguments[0]&&this._memory2D[arguments[0]].fill(0)}reflect(){this._memory2D.reverse()}transpose(){this._memory2D=this._memory2D[0].map((_,i)=>this._memory2D.map(row=>row[i]))}rotate(){this._memory2D=this._memory2D[0].map((_,i)=>this._memory2D.map(row=>row[i]).reverse())}clone(){return new Quadrille(this._memory2D.map(array=>array.slice()))}}p5.prototype.createQuadrille=function(){return new Quadrille(...arguments)},p5.prototype.drawQuadrille=function(quadrille,{x:x=0,y:y=0,cellLength:cellLength=10,outlineWeight:outlineWeight=2,outline:outline="magenta",board:board=!1,min:min=0,max:max=0,alpha:alpha=255}={}){this.push(),this.translate(x*cellLength,y*cellLength),this.stroke(outline),this.strokeWeight(outlineWeight);for(let i=0;i<quadrille._memory2D.length;i++)for(let j=0;j<quadrille._memory2D[i].length;j++)this.push(),quadrille._memory2D[i][j]?quadrille._memory2D[i][j]instanceof p5.Color||Array.isArray(quadrille._memory2D[i][j])?(this.fill(quadrille._memory2D[i][j]),this.rect(j*cellLength,i*cellLength,cellLength,cellLength)):quadrille._memory2D[i][j]instanceof p5.Image?this.image(quadrille._memory2D[i][j],j*cellLength,i*cellLength,cellLength,cellLength):"string"==typeof quadrille._memory2D[i][j]?(this.push(),this.noStroke(),this.fill(outline),this.textSize(cellLength),this.text(quadrille._memory2D[i][j],j*cellLength,i*cellLength,cellLength,cellLength),this.pop(),this.noFill(),this.rect(j*cellLength,i*cellLength,cellLength,cellLength)):"number"==typeof quadrille._memory2D[i][j]&&min<max&&(this.push(),this.colorMode(this.RGB,255),this.fill(this.color(this.map(quadrille._memory2D[i][j],min,max,0,255),alpha)),this.rect(j*cellLength,i*cellLength,cellLength,cellLength),this.pop()):board&&(this.noFill(),this.rect(j*cellLength,i*cellLength,cellLength,cellLength)),this.pop();this.pop()};